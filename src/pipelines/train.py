# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rw0RFLAMMOUvcNGLmz0-1ZK1V_7-OYl4

## Train Cartoon GAN

Jupyter notebook version of the ```src.networks.train.py``` file.
This file contains all cells to train the model from scratch.

#### Configure drive (only if needed)
"""

"""from google.colab import drive
import os
drive.mount("/content/drive")
!cd ..
!ls
PROJECT_DIRECTORY = "drive/My Drive/DeepL/"
os.chdir(PROJECT_DIRECTORY)

!ls

!ls
!pip install -r requirements.txt
"""
import torch
import torch.optim as optim
import os

cuda = torch.cuda.is_available()
print(cuda)

if cuda:
    print(torch.cuda.get_device_name(0))
    # !nvidia-smi

device = "cuda" if cuda else "cpu"

import logging

logging.basicConfig(
    filename="log_file_test.log",
    filemode="a",
    format="%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s",
    datefmt="%H:%M:%S",
    level=logging.DEBUG,
)

"""#### Main parameters

Main (pre-)training parameters are defined here.
It is easier to change some parameters in `.ipynb` file instead of `config.py` while using Google colaboratory.
"""

from src.models.networks.utils.parameters import CartoonGanParameters

BATCH_SIZE = 8

training_parameters = CartoonGanParameters(
    epochs=10,
    gen_lr=0.0002,
    disc_lr=0.0002,
    input_size=256,
    batch_size=BATCH_SIZE,
    conditional_lambda=10,
    gen_beta1=0.5,
    gen_beta2=0.999,
    disc_beta1=0.5,
    disc_beta2=0.999,
)

"""### Prepare data"""

from src.dataset.dataset_cartoon import CartoonDataset
from src.dataset.dataset_pictures import PicturesDataset
from src.preprocessing.filters import Filter
from src.preprocessing.transformations import Transform

from torch.utils.data import DataLoader

filter_data = Filter(new_size=(256, 256))
transform = Transform(new_size=(256, 256), crop_mode="center")

cartoons_dataset = CartoonDataset(
    train=True,
    filter_data=filter_data.cartoon_filter,
    transform=transform.cartoon_transform,
)

print(cartoons_dataset[1].shape)

pictures_dataset = PicturesDataset(
    train=True,
    filter_data=filter_data.picture_filter,
    transform=transform.picture_transform,
)
print(pictures_dataset[0].shape)


train_pictures_loader = DataLoader(
    dataset=pictures_dataset,
    batch_size=BATCH_SIZE,
    shuffle=True,
    # drop last incomplete batch
    drop_last=True,
    num_workers=2,
)

train_cartoons_loader = DataLoader(
    dataset=cartoons_dataset,
    batch_size=BATCH_SIZE,
    shuffle=True,
    drop_last=True,
    num_workers=2,
)

"""### Load model"""

from src.models.cartoon_gan import CartoonGan

cartoon_gan = CartoonGan(
    nb_resnet_blocks=8,
    nb_channels_picture=3,
    nb_channels_cartoon=3,
    nb_channels_1_h_l_gen=64,
    nb_channels_1_h_l_disc=32,
)

pretrained_gen = os.path.join("weights", "pretrained", "pretrained_gen_11.pkl")
pretrained_disc = os.path.join("weights", "pretrained", "pretrained_disc_11.pkl")

cartoon_gan.load_model(pretrained_gen, pretrained_disc)

"""### Training the model"""

cartoon_gan.train(
    picture_loader=train_pictures_loader,
    dataset_cartoon=train_cartoons_loader,
    parameters=training_parameters,
)

from src import config

cartoon_gan.save_model(
    os.path.join(config.WEIGHTS_FOLDER, "trained_gen_0.pt"),
    os.path.join(config.WEIGHTS_FOLDER, "trained_disc_0.pt"),
)
